/**
 * Begin the Mobials JS SDK
 */
if (!MOBIALS) {
    var MOBIALS = {};
}

if (typeof MOBIALS.domain == 'undefined' || ! MOBIALS.domain) {
    MOBIALS.domain = 'api.mobials.com';
}

MOBIALS.popupCache = {};	//cache for popup data
MOBIALS.starsCache = {};	//cache for the stars rating
MOBIALS.styleSheet = false;
MOBIALS.businessIds = [];
MOBIALS.rootElements = [];
MOBIALS.deviceType = false; //desktop, tablet, phone. used to help with setting default actions
MOBIALS.bodyEventCheckingEnabled = false;
MOBIALS.language = false;
MOBIALS.APIKey = false;

/**
 * These resource identifiers relate to the id's of the resources.
 *
 * @type object
 */
MOBIALS.resourceIdentifiers = {
    'star-rating': 1,
    'badge': 2
};

/**
 * General default values used through the SDK.
 *
 * @type object
 */
MOBIALS.defaults = {
    'maxPopupWidth' : 800,
    'maxPopupHeight' : 600
};

//again, for backwards compatibility with IE...
MOBIALS.addEvent = function(el, eventType, handler) {  
  // DOM Level 2 browsers
  if (el.addEventListener) { 
    el.addEventListener(eventType, handler, false);
  } 
  // ancient browsers
  else { 
    el['on' + eventType] = handler;
  }
};
//for backwards compatibility with IE
MOBIALS.getElementsByClassName = function(node, classname) {
    var a = [];
    var re = new RegExp('(^| )'+classname+'( |$)');
    var els = node.getElementsByTagName("*");
    
    for(var i=0,j=els.length; i<j; i++) {
        if (re.test(els[i].className)) {
            a.push(els[i]);
        }
    }
    return a;
};
//function to retrieve screen viewport
MOBIALS.viewport = function() {
    var e = window, a = 'inner';
    if ( !( 'innerWidth' in window ) ) {
        a = 'client';
        e = document.documentElement || document.body;
    }

    return { width : e[ a+'Width' ] , height : e[ a+'Height' ] };
};


//deprecated
MOBIALS.showDetailedRatingsPopup = function(html) {

    var width = MOBIALS.defaults.maxPopupWidth, height = MOBIALS.defaults.maxPopupHeight, top = 0, left = 0;
    var frameContainer = document.createElement('div');
    frameContainer.setAttribute('id', 'mobials-detailed-review-container');
    var v = MOBIALS.viewport();

    if (v.width <= 320) {
        width = v.width - 40;
        left = (v.width - width) / 2;
    }
    else if (v.width <= 480) {
        width = v.width - 40;
        left = (v.width - width) / 2;
    }
    else {
        //width = 480;
        left = (v.width - width) / 2;
    }

    if (v.height < 490) {
        height = v.height - 40;
        top = (v.height - height) / 2;
    }
    else {
        top = (v.height - height) / 2;
    }


    //add an event to this popup
    //attach event to this element when clicked
    MOBIALS.addEvent(frameContainer, 'click', function (e) {

        if ( !e ) {
            e = window.event;
        }

        //stop propagation on this event going up the food chain
        //so that the onclick body event doesn't auto close our new, pretty iframe!
        if (!e) {
            e = window.event;
        }

        e.cancelBubble = true;

        if (e.stopPropagation) {
            e.stopPropagation();
        }
    });


    frameContainer.setAttribute('style', 'width: ' + width + 'px;height:' + height + 'px;top:' + top +'px;left:' + left + 'px;overflow:auto;position:fixed;background:#fff');
    frameContainer.innerHTML = html;
    document.body.appendChild(frameContainer);

    MOBIALS.bodyEventCheckingEnabled = true;
};

//finds the mobials-root element based on one of its children
MOBIALS.getMobialsRootParent = function(el) {

    if (MOBIALS.hasClass(el, 'mobials-root')) {
        return el;
    }

    if (typeof el.parentNode === undefined || el.parentNode === null)
    {
        return false;
    }

    return MOBIALS.getMobialsRootParent(el.parentNode);
};

//determines whether the given element has selector provided
MOBIALS.hasClass  = function (element, className) {
 
    className = " " + className + " ";

    if ((" " + element.className + " ").replace(/[\n\t]/g, " ").indexOf(className) > -1) {
            return true;
    }		

    return false;
};


//for given mobials-root element, build the iframe url and show it in the screen
MOBIALS.showDetailedRatingsIFrame = function(event) {

    //IE doesn't always pass the event object...
    event = event || window.event;

    //it also doesn't always share the target of the event...
    var target = event.target || event.srcElement;

    //we use our event to figure out what our parent mobial-root is
    var el = MOBIALS.getMobialsRootParent(target);      //this is our parent element
    var businessId = el.getAttribute('data-id');	    //and this is the business id
    var resourceType = el.getAttribute('data-type');    //this is used for analytic purposes
    var customAction = el.getAttribute('data-custom-action');   //this el has a custom action so don't show iframe
    var customUrl = el.getAttribute('data-custom-url');

    //couldn't find one!
    if (!businessId) {
        return false;
    }

    if (customAction && customAction == 'true') {
        return;
    }

    /**
     * Banner certified elements have their custom set url's
     */
    if (resourceType == 'banner_certified' || resourceType == 'badge_certified') {
        return;
    }

    //set a default resourceType if none is set
    if (!resourceType) {
        resourceType = 'star-rating';
    }

    var width = MOBIALS.defaults.maxPopupWidth, height = MOBIALS.defaults.maxPopupHeight, top = 0, left = 0;
    var frameContainer = document.createElement('div');
    var closeButton = document.createElement('img');	//a close icon button
    frameContainer.setAttribute('id', 'mobials-detailed-review-container');
    var v = MOBIALS.viewport(); //get screen viewport dimensions

    if (v.width <= 320) {
        width = v.width;
        left = 0;
    }
    else if (v.width <= 480) {
        width = v.width;
        left = 5;
    }
    else if (v.width <= 800) {
        left = 10;
        width = v.width - 20;
    }
    else {
        left = (v.width - width) / 2;
    }

    if (v.height < 600) {
        height = v.height - 50;
        top = 25;

    }
    else {
        top = (v.height - height) / 2;
    }

    //sometimes this can take a few ms to complete and register so we disable event checking for this period
    MOBIALS.disableBodyEventChecking(1000);

    closeButton.setAttribute('id', 'mobials-close-frame-button');
    closeButton.setAttribute('style', 'width:38px;height:38px;display:block;position:fixed;top:' + (top) + 'px;left:' + (left + width - 35) + 'px;z-index:9999;cursor:pointer');
    closeButton.src = '//' + MOBIALS.domain + '/assets/img/app/tab/close-button.png';

    frameContainer.setAttribute('style', 'width: ' +
                                width + 'px;height:' + height + 'px;top:' + top  +'px;left:' + left +
                                'px;background:#ffffff;z-index:9998;overflow-x:hidden;overflow-y:hidden;position:fixed;border:1px solid #444444;padding:2px;-webkit-overflow-scrolling: touch;');

    //frame container contains our iframe
    //needed to keep things working properly on mobile devices
    var protocol = window.location.protocol;
    var src = protocol + '//' + MOBIALS.domain + '/app/business/reviews?container=iframe&id=' + businessId; // + '&source=' + encodeURIComponent(resourceType);

    //does the parent element (star rating) have a mobials-langauge set? If so, we use this to overwrite the default business language
    var language = el.getAttribute('data-language');
    if (language) {
        src += '&language=' + language;
    }
    //else see if they had set a global default language
    else if (MOBIALS.language) {
        src += '&language=' + MOBIALS.language;
    }

    var frame = document.createElement('iframe');
    frame.setAttribute('style', 'width:' + width + 'px;height:' + height + 'px;border:0');

    if (customUrl) {
        src = customUrl;
    }

    //finally we set the url of our frame src
    frame.src = protocol + '//' + MOBIALS.domain + '/tracker/r?type=click&business_id=' + businessId + '&resource_name=' + encodeURIComponent(resourceType) + '&ref=' + encodeURIComponent(src);

    frameContainer.appendChild(closeButton);
    frameContainer.appendChild(frame);

    document.body.appendChild(frameContainer);


    //add an event to the close button
    MOBIALS.addEvent(closeButton, 'click', function() {
        var el = document.getElementById('mobials-detailed-review-container');
        if (el && MOBIALS.bodyEventCheckingEnabled === true) {
            if (el.parentNode) {
                el.parentNode.removeChild(el);
                MOBIALS.bodyEventCheckingEnabled = false;
            }
        }
    });

    //add an event to this popup
    //attach event to this element when clicked
    MOBIALS.addEvent(frameContainer, 'click', function (e) {
        if ( !e ) {
            e = window.event;
        }
        //stop propagation on this event going up the food chain
        //so that the onclick body event doesn't auto close our new, pretty iframe!
        e.cancelBubble = true;
        if (e.stopPropagation) {
            e.stopPropagation();
        }
    });

    //save our tracking event
    /*
    MOBIALS.trackEvent({
        business_resources: '' + businessId + ':' + MOBIALS.resourceIdentifiers[resourceType],
        protocol: window.location.protocol,
        referrer: document.URL,
        query_string: window.location.search,
        type: 'click'
    });
    */
};

//disable body event checking for specificed time
MOBIALS.disableBodyEventChecking = function(duration) {
    MOBIALS.bodyEventCheckingEnabled = false;

    setInterval(function() {
        MOBIALS.bodyEventCheckingEnabled = true;
    }, duration);
};


/**
 * Send a tracker event.
 *
 * @param params
 */
/*
MOBIALS.trackEvent = function(params) {

    //build our query string
    var queryString = '';

    for (var i in params) {
        queryString += '&' + encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);
    }

    queryString = queryString.substring(1);

    var img = new Image();
    img.onload = function() {
         // Probably not required if you're only interested in
         // making the request and don't need a callback function
     };
    img.src = '//' + MOBIALS.domain + '/tracker/index?' + queryString;
};
*/

MOBIALS.getAttribute = function(attributeName, el) {

    for (var i=0; i<el.attributes.length; i++) {


        if (el.attributes[i].nodeName == attributeName) {
            return el.attributes[i].nodeValue;
        }
    }
    return false;
};

//populate the mobial-root elements with our star ratings and/or badges
//and attach event handlers to each
MOBIALS.populateRatings = function(data) {

    if (data) {

        for (var i in data) {
            var id = data[i].id;
            var html = data[i].html;
            var tracker = data[i].tracker;


            //get all mobial elements
            var els;

            //get all mobials-root elements
            if (document.getElementsByClassName) {
                els = document.getElementsByClassName('mobials-root');
            }
            else {
                els = MOBIALS.getElementsByClassName(document.body,'mobials-root');
            }


            //retrieve all business id's
            for (var j = 0; j < els.length; j++) {

                var businessId = els[j].getAttribute('data-id');
                var elTracker = els[j].getAttribute('data-tracker');

                //we found a match. Let's create an onclick event for it
                if (businessId == id && elTracker == tracker) {
                    els[j].innerHTML = html;

                    MOBIALS.addEvent(els[j], 'click', function(event) {
                        MOBIALS.showDetailedRatingsIFrame(event); //we use the event to later figure out which element was clicked
                    });
                    break;
                }
            }
        }
    }
};


//do any init tasks in this method
MOBIALS.init = function(data) {

    var head  = document.getElementsByTagName('head')[0];
    var link  = document.createElement('link');
    link.rel  = 'stylesheet';
    link.type = 'text/css';
    link.media = 'all';

    //link.href = '//mobials.com/assets/css/sdk.css';
    var time = new Date().getTime();
    var protocol = window.location.protocol;
    link.href = protocol + '//' + MOBIALS.domain + '/assets/css/sdk.css?t=' + time;

    MOBIALS.styleSheet = link; //we don't add it to document until we need it.

    //force our style sheet to be the last element in the head
    head.appendChild(link);


    MOBIALS.addEvent(document.body, 'click', function() {

        var el = document.getElementById('mobials-detailed-review-container');
        if (el && MOBIALS.bodyEventCheckingEnabled === true) {
            if (el.parentNode) {
                el.parentNode.removeChild(el);
                MOBIALS.bodyEventCheckingEnabled = false;
            }
        }
    });



    MOBIALS.populateRatings(data);
};


//given a node 'n', this method returns the 
//last of its children. 
MOBIALS.getLastChild = function (n) {

    var x = n.lastChild;
    while (parseInt(x.nodeType) !== 1) {
        x = x.previousSibling;
    }
    return x;
};

//because IE7 and lower doesn't have the indexOf method
if(!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(obj, start) {
         for (var i = (start || 0), j = this.length; i < j; i++) {
             if (this[i] === obj) { return i; }
         }
         return -1;
    };
}

//returns array with all duplicate values removed
MOBIALS.arrayUnique = function(els) {
    var unique= [];
    for (var i = 0; i < els.length; i += 1) {
        if (unique.indexOf(els[i]) === -1) {
            unique.push(els[i]);
        }
    }
    return unique;
};

//this method retrieves a JS URL parameter provided by script_name
//It is a bit hackish and can't be relied upton too much but works for the time being
MOBIALS.getJSvars = function(script_name, var_name, if_empty) {

    var script_elements = document.getElementsByTagName('script');

    if(if_empty === null) {
        if_empty = '';
    }

    for (var a = 0; a < script_elements.length; a++) {

       var source_string = script_elements[a].src;

        if(source_string.indexOf(script_name)>=0) {
            var_name = var_name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
            var regex_string = new RegExp("[\\?&]"+var_name+"=([^&#]*)");
            var parsed_vars = regex_string.exec(source_string);

            if (parsed_vars === null) {
                continue;
            }
            else {
                return parsed_vars[1];
            }
        }
    }

    return if_empty;
};

(function() {	

    //get all mobial elements
    var els;

    //get all mobials-root elements
    if (document.getElementsByClassName) {
        els = document.getElementsByClassName('mobials-root');
    }
    else {
        els = MOBIALS.getElementsByClassName(document.body,'mobials-root');
    }

    var sizes = [];
    var tmp = [];
    var impressionData = [];


    var lang = MOBIALS.getJSvars('mobials', 'language');
    var API_KEY = MOBIALS.API_KEY ? MOBIALS.API_KEY : 0;

    if (lang) {
        MOBIALS.language = lang;
    }

    //used for keeping track of our elements later on
    //We can't simply use the data-id value, as there may be multiple elements on a page
    //all sharing the same id, and even worse, they may share ids but not element sizes!
    //so we need to create our own tracker and pass it to the server, then when the server
    //returns the information, it also includes the tracking # so that we know which element
    //to attach our star rating to. Whew!
    var tracker = 0;

    //retrieve all business id's
    for (var i = 0; i < els.length; i++) {


        var businessId = els[i].getAttribute('data-id');
        var language = els[i].getAttribute('data-language');
        var type = els[i].getAttribute('data-type');

        //if the individual language was not set, we default to their global language
        if (!language) {
            language = lang;
        }

        //the type defines the type of container that will be used
        //the default is 'star-rating' for the publisher star ratings
        //options are:
        //1. star-rating
        //2. badge

        if (!type) {
            type = 'star-rating';
        }

        if (businessId) {

            tracker++;
            els[i].setAttribute('data-tracker', tracker);
            els[i].setAttribute('id', 'mobial-root-' + tracker); //we give each element a unique id in case we need it later


            MOBIALS.businessIds.push(businessId);
            MOBIALS.rootElements.push(els[i]);
            var size = els[i].getAttribute('data-size');

            if (size) {
                sizes.push(size);
            }
            else {
                sizes.push(100); //default
            }

            tmp.push(businessId + ':' + size + ':' + tracker + ':' + language + ':' + type);

            //for impression tracking
            //impressionData.push(businessId + ':' + MOBIALS.resourceIdentifiers['star-rating']);
        }
    }

    //if we have one or more, we load them in using ajax
    if (MOBIALS.businessIds.length > 0) {

        //filter array to contain only the unique values
        MOBIALS.businessIds = MOBIALS.arrayUnique(MOBIALS.businessIds);

        //save our tracking event
        /*
        MOBIALS.trackEvent({
            business_resources: impressionData.join(),
            protocol: window.location.protocol,
            referrer: document.URL,
            query_string: window.location.search,
            type: 'impression'
        });
        */

        //var ids = MOBIALS.businessIds.concat(); //copy business id's into a new array

        //we limit our queries to 50 ids at a time in order to avoid overloading the GET request
        while (tmp.length > 0) { //ids.length > 0) {
            var splice = tmp.splice(0, 50); //ids.splice(0, 50);
            var params = encodeURIComponent(splice);
            var protocol = window.location.protocol;

            var ma = document.createElement('script'); ma.type = 'text/javascript'; ma.async = true;
            ma.src = '//' +  MOBIALS.domain + '/v1/sdk/api.html?callback=MOBIALS.init&key=' + API_KEY + '&ids=' + params;
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(ma, s);
        }




    }
})();